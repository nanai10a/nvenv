name: Publish to npm

on:
  push:
    tags:
      - '*.*.*'
      - '*.*.*-*'

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "version=${TAG}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Extract CHANGELOG for version
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Extract the section for this version from CHANGELOG.md
          # Start from "## [version]" and stop at next "## [" or end of file
          awk "/## \[${VERSION}\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md > release-notes.md

          # Remove the version link at the end if present
          sed -i '/^\[.*\]:.*$/d' release-notes.md

          cat release-notes.md

      - name: Check if pre-release
        id: prerelease
        run: |
          if [[ "${{ steps.version.outputs.version }}" =~ (rc|beta|alpha) ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.tag }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ steps.prerelease.outputs.prerelease }}

  test:
    name: Run tests before publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test
        env:
          NVENV_SILENT: 1

      - name: Test package creation
        run: |
          node src/cli.js --node=18.20.0 test-publish-env
          test -d test-publish-env/bin
          test -d test-publish-env/lib

  publish:
    name: Publish to npm
    needs: [create-release, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # Required for provenance

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm install

      - name: Verify package contents
        run: |
          npm pack --dry-run
          echo "Package contents verified"

      - name: Extract version from tag
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "version=${TAG}" >> $GITHUB_OUTPUT

      - name: Determine npm tag
        id: npm_tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ "$VERSION" =~ rc ]]; then
            echo "tag=rc" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" =~ beta ]]; then
            echo "tag=beta" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" =~ alpha ]]; then
            echo "tag=alpha" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Publish to npm with provenance
        run: npm publish --provenance --access public --tag ${{ steps.npm_tag.outputs.tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Comment on release
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.version }}';
            const npmTag = '${{ steps.npm_tag.outputs.tag }}';

            // Find the release for this tag
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const release = releases.data.find(r => r.tag_name === version);

            if (release) {
              await github.rest.repos.createReleaseDiscussionComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                discussion_number: release.id,
                body: `âœ… Successfully published to npm: https://www.npmjs.com/package/nvenv/v/${version}\n\nInstall with: \`npm install nvenv@${npmTag}\``
              });
            }
